Thunk 函数的原始定义：
	它是“传值调用”类型的语言实现“传名调用”的一种实现；用“表达式”来代替函数输入的“值”
	function f(m){
  		return m * 2;     
	}

	f(x + 5);

	// 等同于

	var thunk = function () {
  		return x + 5;
	};

	function f(thunk){
  		return thunk() * 2;
	}
	上面代码中，函数 f 的参数 x + 5 被一个函数替换了。凡是用到原参数的地方，对 Thunk 函数求值即可。

Thunk 函数在JavaScript中的定义：
	JavaScript 语言是传值调用，它的 Thunk 函数含义有所不同。在 JavaScript 语言中，Thunk 函数替换的不是表达式，而是多参数函数，将其替换	成单参数的版本，且只接受回调函数作为参数。

	// 正常版本的readFile（多参数版本）
	fs.readFile(fileName, callback);

	// Thunk版本的readFile（单参数版本）
	var readFileThunk = Thunk(fileName);
	readFileThunk(callback);

	var Thunk = function (fileName){
  		return function (callback){
    			return fs.readFile(fileName, callback); 
  		};
	};







Promise的定义：
	Promise是抽象异步处理对象以及对其进行各种操作的组件；